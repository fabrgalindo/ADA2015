data()
data(rock)
names(rock)
dim(rock)
help(rock)
help(rock)
data()
library(help="rock")
library(help(rock))
help(rock)
help(area)
hist(rock$area)
hist(rock$peri)
hist(rock$shape)
hist(rock$perm)
sumary(rocks)
sumary(rock)
help(rock)
summary(rock)
summary(rock)
summary(rock)
summary(rock)
plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1, xlim = c(0, 25))
plot(rock, xlab = "area (m2)", ylab = "perimetro (m)",
las = 1, xlim = c(0, 25))
library(lattice)
names(lattice)
data(lattice)
summary(rock)
plot(rock, xlab = "area (px)", ylab = "peri (px)",
las = 1, xlim = c(0, 25))
help(cars)
library(lattice)
dotplot(Amount~Year|Food, consumption)
data()
dotplot(rock~YeFood, consumption)
install.packages("C:/Users/AdrianAV/Downloads/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
c
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
setwd("C:\repoGit")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v<-sample(1:9,100000000,replace=T)
v
system.time(mean(v))
x<-makeVector(v)
system.time(cachemean(x))
system.time(cachemean(x))
system.time(cachemean(x))
help("sample")
m <- matrix(data=1:12,nrow=4,ncol=3,
dimnames=list(c("r1","r2","r3","r4"),
c("c1","c2","c3")))
m
m <- matrix(data=2,2,2,1,0,0,0,0,1,nrow=4,ncol=3,
dimnames=list(c("r1","r2","r3","r4"),
c("c1","c2","c3")))
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
mdat <- matrix(c(2,1,0, 2,0,0, 2,0,1), nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(c("r1", "r2","32"),
c("C.1", "C.2", "C.3")))
mdat
solve(mdat)
mdat2 <- matrix(c(2,-5,-2, -3,-4,0, 0,-4,-1), nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(c("r1", "r2","32"),
c("C.1", "C.2", "C.3")))
mdat2
solve(mdat2)
makeVector
m <- matrix(data=1:12,nrow=4,ncol=3,
dimnames=list(c("r1","r2","r3","r4"),
c("c1","c2","c3")))
m
solve(m)
m <- matrix(data=1:9,nrow=4,ncol=3,
dimnames=list(c("r1","r2","r3"),
c("c1","c2","c3")))
m <- matrix(data=1:9,nrow=3,ncol=3,
dimnames=list(c("r1","r2","r3"),
c("c1","c2","c3")))
m
solve(m)
solve(mdat)
solve(m)
mdat2 <- matrix(c(2,-5,-2, -3,-4,0, 0,-4,-1), nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(c("r1", "r2","32"),
c("C.1", "C.2", "C.3")))
solve(mdat)
mdat
system.time(solve(mdat))
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachesolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
system.time(solve(mdat))7
system.time(solve(mdat))
x<-makeCacheMatrix(mdat)
system.time(cachesolve(x))
system.time(cachesolve(x))
x
makeCacheMatrix(mdat)
makeCacheMatrix(mdat)
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v<-sample(1:9,100,replace=T)
v
system.time(mean(v))
mean(v
)
system.time(mean(v))
x<-makeVector(v)
system.time(cachemean(x))
system.time(cachemean(x))
v<-sample(1:9,1000,replace=T)
system.time(mean(v))
v<-sample(1:9,100000000,replace=T)
system.time(mean(v))
x<-makeVector(v)
system.time(cachemean(x))
system.time(cachemean(x))
m <- matrix(sample(1:9,100,replace=T),nrow=10,ncol=10)
m
solve(m)
m*solve(m)
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachesolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
m
system.time(solve(m))
m <- matrix(sample(1:9,10000,replace=T),nrow=100,ncol=100)
m
solve(m)
system.time(solve(m))
x<-makeCacheMatrix(m)
system.time(cachesolve(x))
m <- matrix(sample(1:9,1000000,replace=T),nrow=1000,ncol=1000)
m
system.time(solve(m))
x<-makeCacheMatrix(m)
system.time(cachesolve(x))
system.time(cachesolve(x))
solve(m)
solve(m)
system.time(cachesolve(x))
system.time(cachesolve(x))
m <- matrix(sample(1:9,1000000,replace=T),nrow=1000,ncol=1000)
system.time(cachesolve(x))
system.time(cachesolve(x))
x<-makeCacheMatrix(m)
system.time(cachesolve(x))
system.time(cachesolve(x))
x<-makeCacheMatrix(m)
system.time(cachesolve(x))
system.time(cachesolve(x))
m <- matrix(sample(1:9,100000000,replace=T),nrow=10000,ncol=10000)
x<-makeCacheMatrix(m)
system.time(cachesolve(x))
x<-makeCacheMatrix(m)
system.time(cachesolve(x))
x<-makeCacheMatrix(m)
setwd("C:/RepoGitHub/ADA2015/Tarea8")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
system.time(cachesolve(x))
source("cachematrix.R")
system.time(cachesolve(x))
system.time(cachesolve(x))
